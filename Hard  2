public class ShortestPalindrome {
    public String shortestPalindrome(String s) {
        int n = s.length();
        int i = 0;

        // Find the longest palindrome substring starting from the beginning
        for (int j = n - 1; j >= 0; j--) {
            if (s.charAt(i) == s.charAt(j)) {
                i++;
            }
        }

        // If the entire string is already a palindrome, return the original string
        if (i == n) {
            return s;
        }

        // Build the shortest palindrome by adding the remaining characters in reverse order
        StringBuilder sb = new StringBuilder(s.substring(i));
        return sb.reverse().toString() + s;
    }

    public static void main(String[] args) {
        ShortestPalindrome shortestPalindrome = new ShortestPalindrome();
        
        // Example 1
        String s1 = "aacecaaa";
        System.out.println(shortestPalindrome.shortestPalindrome(s1));

        // Example 2
        String s2 = "abcd";
        System.out.println(shortestPalindrome.shortestPalindrome(s2));
    }
}
//problem  Hard 2
//Alva's inistute  of engineering and technology
//ananyapaul369@gmail.com
