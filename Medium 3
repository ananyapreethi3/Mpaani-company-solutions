public class MaximalSquare {
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }

        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m + 1][n + 1]; // dp[i][j] represents the side length of the largest square ending at position (i-1, j-1)

        int maxSide = 0;

        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (matrix[i - 1][j - 1] == '1') {
                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;
                    maxSide = Math.max(maxSide, dp[i][j]);
                }
            }
        }

        return maxSide * maxSide;
    }

    public static void main(String[] args) {
        MaximalSquare maximalSquare = new MaximalSquare();

        // Example 1
        char[][] matrix1 = {
                {'0'}
        };
        System.out.println(maximalSquare.maximalSquare(matrix1));

        // Example 2
        char[][] matrix2 = {
                {'0', '1'},
                {'1', '0'}
        };
        System.out.println(maximalSquare.maximalSquare(matrix2));

        // Example 3
        char[][] matrix3 = {
                {'1', '0', '1', '0', '0'},
                {'1', '0', '1', '1', '1'},
                {'1', '1', '1', '1', '1'},
                {'1', '0', '0', '1', '0'}
        };
        System.out.println(maximalSquare.maximalSquare(matrix3));
    }
}

//problem    Medium  3
//Alva's inistute of engineering  and Technology
//ananyapaul369@gmail.com
