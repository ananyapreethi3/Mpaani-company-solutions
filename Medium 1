class TreeNode {
    int val;
    TreeNode left, right;

    public TreeNode(int val) {
        this.val = val;
        this.left = this.right = null;
    }
}

public class LowestCommonAncestorBST {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null) {
            return null;
        }

        // If both nodes are smaller than the current root, LCA is in the left subtree
        if (p.val < root.val && q.val < root.val) {
            return lowestCommonAncestor(root.left, p, q);
        }
        // If both nodes are greater than the current root, LCA is in the right subtree
        else if (p.val > root.val && q.val > root.val) {
            return lowestCommonAncestor(root.right, p, q);
        }
        // If one node is on the left and the other is on the right, the current root is the LCA
        else {
            return root;
        }
    }

    public static void main(String[] args) {
        LowestCommonAncestorBST lcaBST = new LowestCommonAncestorBST();

        // Example 1
        TreeNode root1 = new TreeNode(6);
        root1.left = new TreeNode(2);
        root1.right = new TreeNode(8);
        root1.left.left = new TreeNode(0);
        root1.left.right = new TreeNode(4);
        root1.right.left = new TreeNode(7);
        root1.right.right = new TreeNode(9);
        root1.left.right.left = new TreeNode(3);
        root1.left.right.right = new TreeNode(5);

        TreeNode p1 = new TreeNode(2);
        TreeNode q1 = new TreeNode(8);

        TreeNode result1 = lcaBST.lowestCommonAncestor(root1, p1, q1);
        System.out.println(result1.val);

        // Example 2
        TreeNode root2 = new TreeNode(6);
        root2.left = new TreeNode(2);
        root2.right = new TreeNode(8);
        root2.left.left = new TreeNode(0);
        root2.left.right = new TreeNode(4);
        root2.right.left = new TreeNode(7);
        root2.right.right = new TreeNode(9);
        root2.left.right.left = new TreeNode(3);
        root2.left.right.right = new TreeNode(5);

        TreeNode p2 = new TreeNode(2);
        TreeNode q2 = new TreeNode(4);

        TreeNode result2 = lcaBST.lowestCommonAncestor(root2, p2, q2);
        System.out.println(result2.val);

        // Example 3
        TreeNode root3 = new TreeNode(2);
        root3.left = new TreeNode(1);

        TreeNode p3 = new TreeNode(2);
        TreeNode q3 = new TreeNode(1);

        TreeNode result3 = lcaBST.lowestCommonAncestor(root3, p3, q3);
        System.out.println(result3.val);
    }
}

//problem    Medium 1
//Alva's inistute of engineering  and Technology
//ananyapaul369@gmail.com
